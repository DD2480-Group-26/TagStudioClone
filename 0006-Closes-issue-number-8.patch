From f07c8c9d7fcab8604f80cbadd36a4159528453dd Mon Sep 17 00:00:00 2001
From: Love-goransson <lovegoransson@outlook.com>
Date: Fri, 7 Mar 2025 10:34:11 +0100
Subject: [PATCH 6/7] Closes issue number 8 Fixes the problems as defined in
 the issues.

---
 tagstudio/resources/translations/en.json      |  1 +
 tagstudio/src/core/library/alchemy/enums.py   |  1 +
 tagstudio/src/core/library/alchemy/library.py |  2 +
 tagstudio/tests/qt/test_sort_filename.py      | 71 +++++++++++++++++++
 4 files changed, 75 insertions(+)
 create mode 100644 tagstudio/tests/qt/test_sort_filename.py

diff --git a/tagstudio/resources/translations/en.json b/tagstudio/resources/translations/en.json
index 4fe852d..109e74c 100644
--- a/tagstudio/resources/translations/en.json
+++ b/tagstudio/resources/translations/en.json
@@ -57,6 +57,7 @@
     "field.edit": "Edit Field",
     "field.paste": "Paste Field",
     "file.date_added": "Date Added",
+    "file.filename": "Filename",
     "file.date_created": "Date Created",
     "file.date_modified": "Date Modified",
     "file.dimensions": "Dimensions",
diff --git a/tagstudio/src/core/library/alchemy/enums.py b/tagstudio/src/core/library/alchemy/enums.py
index 7ae865e..fe69265 100644
--- a/tagstudio/src/core/library/alchemy/enums.py
+++ b/tagstudio/src/core/library/alchemy/enums.py
@@ -66,6 +66,7 @@ class ItemType(enum.Enum):
 
 class SortingModeEnum(enum.Enum):
     DATE_ADDED = "file.date_added"
+    FILENAME = "file.filename"
 
 
 @dataclass
diff --git a/tagstudio/src/core/library/alchemy/library.py b/tagstudio/src/core/library/alchemy/library.py
index 5219cdb..4be1bbc 100644
--- a/tagstudio/src/core/library/alchemy/library.py
+++ b/tagstudio/src/core/library/alchemy/library.py
@@ -846,6 +846,8 @@ class Library:
             match search.sorting_mode:
                 case SortingModeEnum.DATE_ADDED:
                     sort_on = Entry.id
+                case SortingModeEnum.FILENAME:
+                    sort_on = Entry.path
 
             statement = statement.order_by(asc(sort_on) if search.ascending else desc(sort_on))
             statement = statement.limit(search.limit).offset(search.offset)
diff --git a/tagstudio/tests/qt/test_sort_filename.py b/tagstudio/tests/qt/test_sort_filename.py
new file mode 100644
index 0000000..8407bf9
--- /dev/null
+++ b/tagstudio/tests/qt/test_sort_filename.py
@@ -0,0 +1,71 @@
+import pytest
+from sqlalchemy import create_engine, select
+from sqlalchemy.orm import sessionmaker, Session as SaSession
+from pathlib import Path
+
+from src.core.library.alchemy.library import Library, LibraryPrefs
+from src.core.library.alchemy.enums import SortingModeEnum, FilterState
+from src.core.library.alchemy.models import Entry, Base, Folder
+
+
+# Define a dummy prefs function that returns default values.
+def dummy_prefs(key):
+    # If the key is LibraryPrefs.EXTENSION_LIST, return an empty list or your default extensions.
+    # Adjust as needed for other preference keys.
+    if key == LibraryPrefs.EXTENSION_LIST:
+        return []
+    return None
+
+
+# Define a session fixture that sets up an in-memory SQLite database.
+@pytest.fixture(scope="function")
+def session():
+    engine = create_engine("sqlite:///:memory:")
+    Base.metadata.create_all(engine)
+    Session = sessionmaker(bind=engine)
+    sess: SaSession = Session()
+    # Attach required attributes to the session:
+    sess.engine = engine
+    sess.prefs = dummy_prefs  # Attach the callable dummy_prefs
+    yield sess
+    sess.close()
+
+
+# Fixture to add dummy entries to the database.
+@pytest.fixture
+def mock_entries(session):
+    """Create dummy files in the database for testing."""
+    # Create a dummy folder (required by Entry)
+    dummy_folder = Folder(path=Path("dummy"), uuid="dummy")
+    session.add(dummy_folder)
+    session.commit()
+
+    # Create entries using a file path, the dummy folder, and an empty list for fields.
+    session.add_all(
+        [
+            Entry(path=Path("banana.txt"), folder=dummy_folder, fields=[]),
+            Entry(path=Path("apple.txt"), folder=dummy_folder, fields=[]),
+            Entry(path=Path("cherry.txt"), folder=dummy_folder, fields=[]),
+        ]
+    )
+    session.commit()
+    return session
+
+
+def test_sort_by_filename_ascending(mock_entries):
+    """Test sorting by filename in ascending order."""
+    filter_state = FilterState(sorting_mode=SortingModeEnum.FILENAME, ascending=True)
+    results = Library.search_library(mock_entries, filter_state)
+
+    # Use entry.path.name to get the filename.
+    filenames = [entry.path.name for entry in results]
+    assert filenames == ["apple.txt", "banana.txt", "cherry.txt"]
+
+
+def test_sort_by_filename_descending(mock_entries):
+    """Test sorting by filename in descending order."""
+    filter_state = FilterState(sorting_mode=SortingModeEnum.FILENAME, ascending=False)
+    results = Library.search_library(mock_entries, filter_state)
+
+    filenames = [entry.path.name for entry in results]
+    assert filenames == ["cherry.txt", "banana.txt", "apple.txt"]
-- 
2.34.1

